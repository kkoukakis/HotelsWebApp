@model HotelsWebApp.Models.WdaContext

@{
    ViewData["Title"] = "HotelsWebApp ~ Search results: "+ ViewBag.Search;
    ViewData["Background"] = "login";
    ViewData["Page"] = "Roomlist";

    @* IF USER IS LOGGED IN *@
    if((string)ViewData["LoggedIn"] == "Y"){
    @* ViewData["Username"] = Html.DisplayFor(model => model.Username); *@
    @* ViewData["Email"] = Html.DisplayFor(model => model.Email); *@
    }

    var search = ViewBag.Search;
    var city = (string)ViewBag.city;
    List<HotelsWebApp.Models.Room> rooms = Model.Room.ToList();
    List<HotelsWebApp.Models.Bookings> bookings = Model.Bookings.ToList();
    var roomtype = (string)ViewBag.roomtype;
    var parking = (string)ViewBag.parking;
    var wifi = (string)ViewBag.wifi;
    var petfriendly = (string)ViewBag.petfriendly;
   
    if(!string.IsNullOrEmpty(city)){
     rooms = rooms.Where(x => x.City == city).ToList();
    }

    if(!string.IsNullOrEmpty(roomtype))
    if(Int32.Parse(roomtype)>0){
    var type = Model.RoomType.Where(x => x.id == Int32.Parse(roomtype)).ToList().First();
     rooms = rooms.Where(x => x.RoomType == type.id).ToList();
    }

     if(!string.IsNullOrEmpty(parking)){
     rooms = rooms.Where(x => x.Parking == Int32.Parse(parking)).ToList();
    }
     if(!string.IsNullOrEmpty(wifi)){
     rooms = rooms.Where(x => x.Wifi == Int32.Parse(wifi)).ToList();
    }
     if(!string.IsNullOrEmpty(petfriendly)){
     rooms = rooms.Where(x => x.PetFriendly == Int32.Parse(petfriendly)).ToList();
    }

    if(!string.IsNullOrEmpty(ViewBag.pricefrom)){
      rooms = rooms.Where(x => x.Price >= Int32.Parse(ViewBag.pricefrom)).ToList();
    }
    if(!string.IsNullOrEmpty(ViewBag.pricetill)){
      rooms = rooms.Where(x => x.Price <= Int32.Parse(ViewBag.pricetill)).ToList();
    }
    if(!string.IsNullOrEmpty(ViewBag.datefrom) && !string.IsNullOrEmpty(ViewBag.datetill)){
      
      //CHECK DATES HERE
    }

    


}

<main>

<!-- MAIN CONTENT -->

<div class="container">
  <div class="row login-kouk">
    @* LOAD SEARCH BOX COMPONENT *@
    @await Component.InvokeAsync("Searchbox", Model)
  </div>

  <div class="row">
    <div class="col s12 background-color-kouk">
      <h6 class="white-text">Search Results</h6>
    </div>
  </div>

  <div class="row">
    
    <!-- ROOMS -->

     @foreach (var room in rooms)  
    {
    
    <div class="col s12 m12 l12">
      <div class="card">
        <div class="card-image horizontal">
          <img class="materialboxed" src="~/img/room_images/@room.Photo">
          <span class="card-title">@room.Name</span>
             @{
            if((string)ViewData["LoggedIn"] == "Y"){
                  <a asp-area="" asp-controller="Home" asp-action="Room" asp-route-RoomId="@room.RoomId" class="btn-floating halfway-fab waves-effect waves-light background-color-kouk"><i class="material-icons">account_balance_wallet</i></a>
            }

          }
        </div>
        <div class="card-content">
          <p>@room.ShortDescription</p>
          <p>RoomType=@room.RoomType</p>
          <p>Price=@room.Price</p>
          @{
            if((string)ViewData["LoggedIn"] != "Y"){
               @* <a asp-controller="Account" asp-action="Login" class="waves-effect waves-light btn"><i class="material-icons left">vpn_key</i>Login First</a> *@
            }

            

          }

            <a asp-controller="Home" asp-action="Room" asp-route-RoomId="@room.RoomId" class="waves-effect waves-light btn"><i class="material-icons left">house</i>Check this room</a>
        </div>
      </div>
    </div>
    } 
</div>




<!-- ENDS OF MAIN CONTENT -->
<div class="row"></div>
<div class="row"></div>
</main>

